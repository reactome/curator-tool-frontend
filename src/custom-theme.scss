// Custom Theming for Angular Material
// For more information: https://material.angular.io/guide/theming
@use '@angular/material' as mat;
@use "palette" as p;
@use "variables";
@use 'sass:map';
@use 'theme-helper';

$bg-color: map.get(p.$primary-colors, 990);


// Plus imports for other components in your app.

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
// TODO(v15): As of v15 mat.core no longer includes default typography styles.
//  The following line adds:
//    1. Default typography styles for all components
//    2. Styles for typography hierarchy classes (e.g. .mat-headline-1)
//  If you specify typography styles for the components you use elsewhere, you should delete this line.
//  If you don't need the default component typographies but still want the hierarchy styles,
//  you can delete this line and instead use:
//    `@include mat.typography-hierarchy(mat.define-typography-config());`
@include mat.all-component-typographies();
@include mat.core();


// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/
$primary-palette: mat.define-palette(p.$primary-colors, 600);
$secondary-palette: mat.define-palette(p.$secondary-colors, 600);
$tertiary-palette: mat.define-palette(p.$tertiary-colors, 600);

// The warn palette is optional (defaults to red).
$error-palette: mat.define-palette(p.$error-colors);
$neutral-palette: mat.define-palette(p.$neutral-colors);
$neutral-variant-palette: mat.define-palette(p.$neutral-variant-colors);

// Create the theme object. A theme consists of configurations for individual
// theming systems such as "color" or "typography".
$light-theme: mat.define-light-theme((
  color: (
    primary: $primary-palette,
    accent: $tertiary-palette,
    warn: $error-palette,
  ),
  density: -1
));

$dark-theme: mat.define-dark-theme((
  color: (
    primary: mat.define-palette(p.$primary-colors, 200),
    accent: mat.define-palette(p.$tertiary-colors, 200),
    warn: mat.define-palette(p.$error-colors, 200),
  )
));

$palettes: (
  primary-palette: $primary-palette,
  secondary-palette: $secondary-palette,
  tertiary-palette: $tertiary-palette,
  error-palette: $error-palette,
  neutral-palette: $neutral-palette,
  neutral-variant-palette: $neutral-variant-palette
);

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include mat.all-component-themes($light-theme);



//@include nested-stepper.theme($light-theme);
$bg-color: map.get(p.$primary-colors, 010);

$color-config: mat.get-color-config($light-theme);



// Apply the dark theme only when the user prefers dark themes.
@media (prefers-color-scheme: dark) {
  // Use the `-color` mixins to only apply color styles without reapplying the same
  // typography and density styles.
  $bg-color: map.get(p.$primary-colors, 950);

  $dark-theme: theme-helper.modify-background($dark-theme, p.$dark-theme-background-palette);
  $dark-theme: theme-helper.modify-foreground($dark-theme, p.$dark-theme-foreground-palette);

  $color-config: mat.get-color-config($dark-theme);
  @include mat.all-component-colors($dark-theme);
}

@include variables.theme($palettes);
